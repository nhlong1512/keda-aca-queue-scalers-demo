name: Build and deploy to Azure

on:
  push:
    branches:
      - main

env:
  SUBSCRIPTIONID: c38893c4-15b8-4925-bad8-f5486addcc7d
  RESOURCEGROUP: keda-demo-rg
  LOCATION: eastus
  PREFIX: keda-demo-

jobs:
  provision:
    name: Provision
    runs-on: ubuntu-latest
    outputs:
      queueName: ${{ steps.deploy.outputs.queueName }}
      queueStorageAccountName: ${{ steps.deploy.outputs.queueStorageAccountName }}
      queueConnectionString: ${{ steps.deploy.outputs.storageAccountConnectionString }}
    steps:
    - uses: actions/checkout@master

    - name: Azure authentication
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Create Azure Resource Group
      run: |
        if [ $(az group exists --name ${{ env.RESOURCEGROUP }}) = false ]; then
          az group create -n ${{ env.RESOURCEGROUP }} -l ${{ env.LOCATION }}
        fi

    - uses: azure/arm-deploy@v1
      name: Create Azure Resources
      id: deploy
      with:
        subscriptionId: ${{ env.SUBSCRIPTIONID }}
        resourceGroupName: ${{ env.RESOURCEGROUP }}
        template: ./src/Environment/master.json
        parameters: prefix="${{ env.PREFIX }}"

    - name: check outputs
      run: |
        echo "Queue Name: ${{ steps.deploy.outputs.queueName }}"
        echo "Queue Storage Account: ${{ steps.deploy.outputs.queueStorageAccountName }}"
        echo "Storage Account Connection String: ${{ steps.deploy.outputs.storageAccountConnectionString }}"

  testStorageQueue:
    name: Test Storage Queue
    needs:  [provision]
    runs-on: ubuntu-latest
    outputs:
      startDate: ${{ steps.date.outputs.date }}
    strategy:
      fail-fast: false
      matrix:
        container: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    steps:
    - name: Get current date
      id: date
      run: echo "::set-output name=date::$(date +'%Y-%m-%dT%H:%M:%S')"

    - name: Put message 1
      shell: bash
      run: |
        az storage message put \
          --content "Hello Queue Reader App ${{ matrix.container }}-1" \
          --queue-name "${{ needs.provision.outputs.queueName }}" \
          --connection-string "${{ needs.provision.outputs.queueConnectionString }}"
          
    - name: Put message 2
      shell: bash
      run: |
        az storage message put \
          --content "Hello Queue Reader App ${{ matrix.container }}-2" \
          --queue-name "${{ needs.provision.outputs.queueName }}" \
          --connection-string "${{ needs.provision.outputs.queueConnectionString }}"
          
    - name: Put message 3
      shell: bash
      run: |
        az storage message put \
          --content "Hello Queue Reader App ${{ matrix.container }}-3" \
          --queue-name "${{ needs.provision.outputs.queueName }}" \
          --connection-string "${{ needs.provision.outputs.queueConnectionString }}"
          
    - name: Put message 4
      shell: bash
      run: |
        az storage message put \
          --content "Hello Queue Reader App ${{ matrix.container }}-4" \
          --queue-name "${{ needs.provision.outputs.queueName }}" \
          --connection-string "${{ needs.provision.outputs.queueConnectionString }}"
          
    - name: Put message 5
      shell: bash
      run: |
        az storage message put \
          --content "Hello Queue Reader App ${{ matrix.container }}-5" \
          --queue-name "${{ needs.provision.outputs.queueName }}" \
          --connection-string "${{ needs.provision.outputs.queueConnectionString }}"

  validateStorageQueue:
    name: Validate Storage Queue
    needs: [testStorageQueue]
    runs-on: ubuntu-latest
    steps:
    - name: Azure authentication
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Check Metrics
      run: |
        az config set extension.use_dynamic_install=yes_without_prompt
        az provider register --namespace Microsoft.App
        az provider register --namespace Microsoft.OperationalInsights

        NAME=$PREFIX"acae"
        LOG_ANALYTICS_WORKSPACE_CLIENT_ID=`az containerapp env show --name $NAME --resource-group $RESOURCEGROUP --query properties.appLogsConfiguration.logAnalyticsConfiguration.customerId --out tsv`

        RESULT=`az monitor log-analytics query \
          --workspace $LOG_ANALYTICS_WORKSPACE_CLIENT_ID \
          --analytics-query "ContainerAppConsoleLogs_CL | where ContainerAppName_s == 'storagequeuereader' and Log_s contains 'Message ID' and TimeGenerated > todatetime('${{ needs.testStorageQueue.outputs.startDate }}') | summarize count()" \
          --out tsv`
        # Retain only the count of messages
        MESSAGES=${RESULT##* }

        if [ "$MESSAGES" -ge "100" ]; then
          echo "Messages Processed: $MESSAGES, Success"
        else
          echo "Messages Processed: $MESSAGES, FAILED!"
          exit 1
        fi

  cleanup:
    name: Clean Up
    needs: [validateStorageQueue]
    runs-on: ubuntu-latest
    environment: 'cleanup'
    steps:
    - name: Azure authentication
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Delete Log Analytics Workspace
      continue-on-error: true
      run: |
        az monitor log-analytics workspace delete -g ${{ env.RESOURCEGROUP }} \
          --workspace-name ${{ env.LOGANALYTICSWORKSPACENAME }} \
          --force true --yes

    - name: Delete Resource Group
      continue-on-error: true
      run: |
        az group delete -g ${{ env.RESOURCEGROUP }} --yes
