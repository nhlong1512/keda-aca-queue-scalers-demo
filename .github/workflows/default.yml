name: Build and deploy to Azure

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  PREFIX: keda-demo-
  SUBSCRIPTIONID: c38893c4-15b8-4925-bad8-f5486addcc7d
  RESOURCEGROUP: keda-demo-rg
  LOCATION: eastus
  MAXMESSAGES: 1000

jobs:
  build:
    name: Build container images
    runs-on: ubuntu-latest
    outputs:
      registryName: ${{ steps.deploy.outputs.registryName }}
    steps:
    - name: Get current date
      id: date
      run: echo "date=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT

    - uses: actions/checkout@master

    - name: Azure authentication
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Create Azure Resource Group
      run: |
        if [ $(az group exists --name ${{ env.RESOURCEGROUP }}) = false ]; then
          az group create -n ${{ env.RESOURCEGROUP }} -l ${{ env.LOCATION }}
        fi

    - uses: azure/arm-deploy@v1
      name: Create Azure Resources
      id: deploy
      with:
        subscriptionId: ${{ env.SUBSCRIPTIONID }}
        resourceGroupName: ${{ env.RESOURCEGROUP }}
        template: ./src/Environment/registry.json
        parameters: prefix="${{ env.PREFIX }}"
        deploymentName: ${{ env.PREFIX }}registry-${{ steps.date.outputs.date }} 

    - name: ACR Build Service Bus Queue Producer
      run: |
        cd src/Apps/ServiceBus
        az acr build --image service-bus/queue-producer:latest \
          --registry ${{ steps.deploy.outputs.registryName }} \
          --file ServiceBusQueueProducer/Dockerfile .
 
    - name: ACR Build Service Bus Queue Reader
      run: |
        cd src/Apps/ServiceBus
        az acr build --image service-bus/queue-reader:latest \
          --registry ${{ steps.deploy.outputs.registryName }} \
          --file ServiceBusQueueReader/Dockerfile .

  provision:
    name: Create Azure Resources
    runs-on: ubuntu-latest
    needs: [build]
    outputs:
      logAnalyticsWorkspaceName: ${{ steps.deploy.outputs.logAnalyticsWorkspaceName }}
      storageQueueName: ${{ steps.deploy.outputs.storageQueueName }}
      queueConnectionString: ${{ steps.deploy.outputs.storageAccountConnectionString }}
      serviceBusName: ${{ steps.deploy.outputs.serviceBusName }}
      serviceBusKey: ${{ steps.deploy.outputs.serviceBusKey }}
    steps:
    - name: Get current date
      id: date
      run: echo "date=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT

    - uses: actions/checkout@master

    - name: Azure authentication
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Create Azure Resource Group
      run: |
        if [ $(az group exists --name ${{ env.RESOURCEGROUP }}) = false ]; then
          az group create -n ${{ env.RESOURCEGROUP }} -l ${{ env.LOCATION }}
        fi

    - uses: azure/arm-deploy@v1
      name: Create Azure Resources
      id: deploy
      with:
        subscriptionId: ${{ env.SUBSCRIPTIONID }}
        resourceGroupName: ${{ env.RESOURCEGROUP }}
        template: ./src/Environment/master.json
        parameters: prefix="${{ env.PREFIX }}" registryName="${{ needs.build.outputs.registryName }}"
        deploymentName: ${{ env.PREFIX }}master-${{ steps.date.outputs.date }}

    - name: check outputs
      run: |
        echo "Queue Name: ${{ steps.deploy.outputs.storageQueueName }}"
        echo "Storage Account Connection String: ${{ steps.deploy.outputs.storageAccountConnectionString }}"

  testStorageQueue:
    name: Test Storage Queue
    needs:  [provision]
    runs-on: ubuntu-latest
    outputs:
      startDate: ${{ steps.date.outputs.date }}
    strategy:
      fail-fast: false
      matrix:
        container: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    steps:
    - name: Get current date
      id: date
      run: echo "date=$(date +'%Y-%m-%dT%H:%M:%S')" >> $GITHUB_OUTPUT

    - name: Put messages in storage queue
      shell: bash
      run: |
        max=100
        for ((i=1; i<=max; i++)); do
          az storage message put \
            --content "Hello Queue Reader App ${{ matrix.container }}-$i" \
            --queue-name "${{ needs.provision.outputs.storageQueueName }}" \
            --connection-string "${{ needs.provision.outputs.queueConnectionString }}"
          # adding a 1s sleep to avoid overwhelming queue
          if (($i % 5 == 0)); then
            sleep 1s;
          fi
        done

  validateStorageQueue:
    name: Validate Storage Queue
    needs: [testStorageQueue]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master

    - name: Azure authentication
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Check Metrics
      run: |
        az config set extension.use_dynamic_install=yes_without_prompt
        az provider register --namespace Microsoft.App
        az provider register --namespace Microsoft.OperationalInsights

        ./src/Environment/check_metrics.sh '${{ env.RESOURCEGROUP }}' '${{ env.PREFIX }}' 'storagequeuereader' '${{ needs.testStorageQueue.outputs.startDate }}' '${{ env.MAXMESSAGES }}'

  testServiceBusQueue:
    name: Test Service Bus Queue
    needs:  [build,provision]
    runs-on: ubuntu-latest
    outputs:
      startDate: ${{ steps.date.outputs.date }}
    steps:
    - name: Get current date
      id: date
      run: echo "date=$(date +'%Y-%m-%dT%H:%M:%S')" >> $GITHUB_OUTPUT

    - name: Get current date for deploy
      id: deployDate
      run: echo "date=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT

    - uses: actions/checkout@master

    - name: Azure authentication
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - uses: azure/arm-deploy@v1
      name: Deploy Service Bus Queue Producer
      id: deploy
      with:
        subscriptionId: ${{ env.SUBSCRIPTIONID }}
        resourceGroupName: ${{ env.RESOURCEGROUP }}
        template: ./src/Environment/service_bus_queue_producer.json
        parameters: registryName="${{ needs.build.outputs.registryName }}" serviceBusName="${{ needs.provision.outputs.serviceBusName }}" numberOfMessages=${{ env.MAXMESSAGES }}
        deploymentName: ${{ env.PREFIX }}sbp-${{ steps.deployDate.outputs.date }}

  validateServiceBusQueue:
    name: Validate Service Bus Queue
    needs: [testServiceBusQueue]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master

    - name: Azure authentication
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Check Metrics
      run: |
        az config set extension.use_dynamic_install=yes_without_prompt
        az provider register --namespace Microsoft.App
        az provider register --namespace Microsoft.OperationalInsights

        ./src/Environment/check_metrics.sh '${{ env.RESOURCEGROUP }}' '${{ env.PREFIX }}' 'servicebusqueuereader' '${{ needs.testServiceBusQueue.outputs.startDate }}' '${{ env.MAXMESSAGES }}'

  cleanup:
    name: Clean Up
    needs: [provision,validateStorageQueue,validateServiceBusQueue]
    runs-on: ubuntu-latest
    environment: 'cleanup'
    steps:
    - name: Azure authentication
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Delete Log Analytics Workspace
      continue-on-error: true
      run: |
        az monitor log-analytics workspace delete -g ${{ env.RESOURCEGROUP }} \
          --workspace-name ${{ needs.provision.outputs.logAnalyticsWorkspaceName }} \
          --force true --yes

    - name: Delete Resource Group
      continue-on-error: true
      run: |
        az group delete -g ${{ env.RESOURCEGROUP }} --yes
